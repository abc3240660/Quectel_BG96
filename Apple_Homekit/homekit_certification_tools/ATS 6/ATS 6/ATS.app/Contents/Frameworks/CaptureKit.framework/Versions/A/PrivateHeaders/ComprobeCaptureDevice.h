//
//  ComprobeCaptureDevice.h
//  ATSMacApp
//
//  Created by Daniel Moura on 5/21/13.
//  Copyright (c) 2013 Apple Inc. All rights reserved.
//

#import <CaptureKit/CaptureDevice+Protected.h>
#import <CaptureKit/BluetoothDevice.h>

@class ComprobeFrame;
@class ComprobeCaptureDevice;
@class FTDataFrame;

@protocol ComprobeCaptureDeviceDelegate <NSObject>

@required

/*!
 Tells the dalegate that the given frame was just reported by the ComProbe.
 
 @param device The ComProbe that reported the frame.
 @param frame The reported frame.
 @param timestamp The normalized timestamp to use when displaying the frame.
 @return The list of events that were generated by the frame.
 */
- (NSArray *)comprobeCaptureDevice:(ComprobeCaptureDevice *)device sawFrame:(FTDataFrame *)frame atTimestamp:(UInt64)timestamp;

/*!
 @method     comprobeCaptureDevice:sawFrameData:fromAddress:atTimestamp:
 @abstract   processes the data received by the comprobeCaptureDevice
 */
- (NSArray *)comprobeCaptureDevice:(ComprobeCaptureDevice *)device sawFrameData:(NSData *)frameData fromAddress:(NSData *)address atTimestamp:(UInt64)timestamp;

/*!
 @method     comprobeCaptureDeviceDidFinishDisconnect:
 @abstract   Called after the comprobe has finished disconnecting.
 @param      error
             Set if there was an error during stopping.
 */
- (void)comprobeCaptureDevice:(ComprobeCaptureDevice *)device didFinishDisconnectWithError:(NSError *)error;

/*!
 @method     comprobeCaptureDeviceEncounteredError:
 @abstract   handles when the comprobe encountered an error;
 */
- (void)comprobeCaptureDeviceEncounteredError:(NSError *)error;

/*!
 @method     comprobeCaptureDeviceDidBecomeInvalid:
 @abstract   notifies that the comprobeCaptureDevice became invalid
 */
- (void)comprobeCaptureDeviceDidBecomeInvalid:(ComprobeCaptureDevice *)device;

@end

/*!
 @const      ComprobeCaptureDeviceInquiryFinishedNotification
 @abstract   The string that represents the ending of a bluetooth inquiry.
 */
extern NSString *const ComprobeCaptureDeviceInquiryFinishedNotification;

@interface ComprobeCaptureDevice : CaptureDevice

/*!
 @property   delegate
 @abstract   The delegate that listens to the ComprobeCaptureDevice messages
 */
@property (nonatomic, assign) id<ComprobeCaptureDeviceDelegate> delegate;

/*!
 @@property     isPerformingDeviceInquiry:
 @abstract      Notifies if the bluetooth devices inquiry is being performed
 */
@property (nonatomic, readonly) BOOL isPerformingDeviceInquiry;

/*!
 @method     startDeviceInquiry:
 @abstract   Begin to search for bluetooth devices.
 @return     YES if the device inquiry was successfully started, NO otherwise
 */
- (BOOL)startDeviceInquiry:(NSError **)error;

/*!
 @method     stopDeviceInquiry:
 @abstract   Cancel the bluetooth devices inquiry.
 */
- (void)stopDeviceInquiry;

/*!
 @method     configureUsingAppleDevice:accessory:linkKey:
 @abstract   Configure the comprobe with specified apple device and accessory  addresses.
 */
- (void)configureUsingAppleDevice:(NSString *)appleDeviceAddress accessory:(NSString *)accessoryAddress linkKey:(NSString *)linkKey;

@end
