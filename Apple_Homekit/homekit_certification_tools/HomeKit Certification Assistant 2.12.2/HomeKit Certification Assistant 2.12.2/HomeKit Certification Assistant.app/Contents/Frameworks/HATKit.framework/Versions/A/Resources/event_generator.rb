require 'yaml'
require 'erb'

event_yaml_files = Dir.glob(File.join(File.dirname(__FILE__), "..", "Events", "*.yml"))

EventClassHeaderTemplate = ERB.new <<-END
@interface <%= name %>: <%= info['parent'] || "HEEvent" %>

<% info['serialized_properties']&.each_pair do |property_name, attributes| %>
@property <%= attributes['type'] %> <%= property_name %>;
<% end %>

<% info['computed_properties']&.each_pair do |property_name, attributes| %>
  <% if attributes.is_a? String %>
    @property (readonly) NSString *<%= property_name %>;
  <% else %>
    @property (readonly) <%= attributes['type'] %><%= property_name %>;
  <% end %>
<% end %>

@end
END

ImplementationIncludes = <<-END
#import <CoreHAP/HAPMetadata.h>
#import <HATKit/HATAccessoryServer.h>
END

EventClassImplementationTemplate = ERB.new <<-END

@implementation <%= name %>
+ (NSString *)classSerializationIdentifier
{
    return @"<%= name %>";
}

+ (BOOL)shouldSerializeKey:(NSString *)key
{
    NSArray *nonSerializedProperties = @[
      <% info['computed_properties']&.each_pair do |property_name, attributes| %>
      @"<%= property_name %>",
      <% end %>
    ];

    if ([nonSerializedProperties containsObject: key]) {
        return NO;
    }

    return [super shouldSerializeKey:key];
}

<% info['computed_properties']&.each_pair do |property_name, attributes| %>
  <% if attributes.is_a? String %>
    - (NSString *)<%= property_name %>
    {
          return @"<%= attributes %>";
    }
  <% else %>
    - (<%= attributes['type'] %>)<%= property_name %>
    {
        <% if attributes['computed'] %>
          return <%= attributes['computed'] %>;
        <% end %>
    }
  <% end %>

<% end %>

- (NSString *)eventName
{
    return @"<%= info['name'] %>";
}

- (APReportAnalyzerEntry *)reportAnalyzerEntry
{
    APReportAnalyzerEntry *entry = [super reportAnalyzerEntry];
    [entry setSectionTitle: self.eventName];

    <% info['report']&.each do |item| %>
    <%= report_analyzer_entry_item(item.keys.first, item.values.first, (info['computed_properties'] || {}).merge(info['serialized_properties'])) %>
    <% end %>

    return entry;
}

@end
END

def report_analyzer_entry_item(type, info, properties)
  property = properties[info] || raise("No properties defined for: #{info}. Available properties: #{properties.keys}")

  case(type)
  when 'value'
    "[entry addLineWithKey:@\"#{property['name']}\" value: self.#{info}];"
  when 'data'
    "[entry addEntryWithData:self.#{info} label:@\"#{property['name']}\"];"
  when 'primitive_value'
    "[entry addLineWithKey:@\"#{property['name']}\" value: @(self.#{info})];"
  when 'array'
    <<-END
    {
        APReportAnalyzerEntry *subEntry = [entry addNestedEntry];
        for (NSString *value in self.#{info}) {
            [subEntry addLineWithString:value];
        }
        [subEntry setSectionTitle: @"#{property['name']}"];
    }
    END
  end
end

event_yaml_files.each do |file|
  event_classes = YAML.load_file(file)

  header_filename = File.join(File.dirname(__FILE__), '..', 'AutoGenerated', 'HEAutoGeneratedEvents.h')
  implementation_filename = File.join(File.dirname(__FILE__), '..', 'AutoGenerated', 'HEAutoGeneratedEvents.m')

  header = File.open(header_filename, 'w')
  implementation = File.open(implementation_filename, 'w')

  implementation.write(ImplementationIncludes)

  event_classes.each_pair do |name, info|
    header.write EventClassHeaderTemplate.result(binding)
    implementation.write EventClassImplementationTemplate.result(binding)
  end

  header.close
  implementation.close
end
